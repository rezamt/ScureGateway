<?xml version="1.0" encoding="UTF-8"?>
<exp:Export Version="3.0"
    xmlns:L7p="http://www.layer7tech.com/ws/policy"
    xmlns:exp="http://www.layer7tech.com/ws/policy/export" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
    <exp:References>
        <IDProviderReference RefType="com.l7tech.console.policy.exporter.IdProviderReference">
            <GOID>0000000000000000fffffffffffffffe</GOID>
            <Name>Internal Identity Provider</Name>
            <Props>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGphdmEgdmVyc2lvbj0iMS44&#xd;
LjBfMTMxIiBjbGFzcz0iamF2YS5iZWFucy5YTUxEZWNvZGVyIj4KIDxvYmplY3QgY2xhc3M9Imph&#xd;
dmEudXRpbC5IYXNoTWFwIj4KICA8dm9pZCBtZXRob2Q9InB1dCI+CiAgIDxzdHJpbmc+YWRtaW5F&#xd;
bmFibGVkPC9zdHJpbmc+CiAgIDxib29sZWFuPnRydWU8L2Jvb2xlYW4+CiAgPC92b2lkPgogPC9v&#xd;
YmplY3Q+CjwvamF2YT4K</Props>
            <TypeVal>1</TypeVal>
        </IDProviderReference>
    </exp:References>
    <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
        <wsp:All wsp:Usage="Required">
            <L7p:AuditAssertion/>
            <L7p:SetVariable>
                <L7p:AssertionComment assertionComment="included">
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue="// Default: Response decoration is disabled."/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:AssertionComment>
                <L7p:Base64Expression stringValue="ZmFsc2U="/>
                <L7p:VariableToSet stringValue="Flag_Enable_Response_Decoration"/>
            </L7p:SetVariable>
            <wsp:All wsp:Usage="Required">
                <wsp:OneOrMore wsp:Usage="Required">
                    <wsp:All wsp:Usage="Required">
                        <wsp:OneOrMore wsp:Usage="Required">
                            <L7p:EncryptedUsernameToken/>
                            <wsse:SecurityToken xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
                                <wsse:TokenType>http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3</wsse:TokenType>
                                <L7p:Properties/>
                            </wsse:SecurityToken>
                            <wsse:SecurityToken xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
                                <wsse:TokenType>urn:oasis:names:tc:SAML:2.0:assertion#Assertion</wsse:TokenType>
                                <L7p:SamlParams>
                                    <L7p:AuthenticationStatement samlAuthenticationInfo="included">
                                    <L7p:AuthenticationMethods stringArrayValue="included">
                                    <L7p:item stringValue="urn:oasis:names:tc:SAML:1.0:am:X509-PKI"/>
                                    </L7p:AuthenticationMethods>
                                    </L7p:AuthenticationStatement>
                                    <L7p:NameFormats stringArrayValue="included">
                                    <L7p:item stringValue="urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName"/>
                                    </L7p:NameFormats>
                                    <L7p:NameQualifier stringValue=""/>

                                    <L7p:RequireHolderOfKeyWithMessageSignature booleanValue="true"/>

                                    <L7p:SubjectConfirmationDataCheckAddress booleanValue="true"/>
                                    <L7p:SubjectConfirmations stringArrayValue="included">
                                    <L7p:item stringValue="urn:oasis:names:tc:SAML:1.0:cm:holder-of-key"/>
                                    </L7p:SubjectConfirmations>
                                    <L7p:Version boxedIntegerValue="0"/>
                                </L7p:SamlParams>
                            </wsse:SecurityToken>
                            <wsse:SecurityToken xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
                                <wsse:TokenType>http://schemas.xmlsoap.org/ws/2004/04/security/sc/sct</wsse:TokenType>
                                <L7p:Properties/>
                            </wsse:SecurityToken>
                        </wsp:OneOrMore>
                        <L7p:RequireWssTimestamp>
                            <L7p:MaxExpiryMilliseconds longValue="3600000"/>
                        </L7p:RequireWssTimestamp>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <L7p:RequireWssSignedElement>
                                <L7p:AcceptedDigestAlgorithms stringArrayValue="included">
                                    <L7p:item stringValue="http://www.w3.org/2000/09/xmldsig#sha1"/>
                                    <L7p:item stringValue="http://www.w3.org/2001/04/xmlenc#sha256"/>
                                    <L7p:item stringValue="http://www.w3.org/2001/04/xmldsig-more#sha384"/>
                                    <L7p:item stringValue="http://www.w3.org/2001/04/xmlenc#sha512"/>
                                </L7p:AcceptedDigestAlgorithms>
                                <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/s11:Envelope/s11:Body"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s11"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                </L7p:XpathExpression>
                            </L7p:RequireWssSignedElement>
                            <L7p:RequireWssSignedElement>
                                <L7p:AcceptedDigestAlgorithms stringArrayValue="included">
                                    <L7p:item stringValue="http://www.w3.org/2000/09/xmldsig#sha1"/>
                                    <L7p:item stringValue="http://www.w3.org/2001/04/xmlenc#sha256"/>
                                    <L7p:item stringValue="http://www.w3.org/2001/04/xmldsig-more#sha384"/>
                                    <L7p:item stringValue="http://www.w3.org/2001/04/xmlenc#sha512"/>
                                </L7p:AcceptedDigestAlgorithms>
                                <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/s12:Envelope/s12:Body"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s12"/>
                                    <L7p:value stringValue="http://www.w3.org/2003/05/soap-envelope"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                </L7p:XpathExpression>
                            </L7p:RequireWssSignedElement>
                        </wsp:OneOrMore>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="dHJ1ZQ=="/>
                            <L7p:VariableToSet stringValue="Flag_Enable_Response_Decoration"/>
                        </L7p:SetVariable>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="LEFT.COMMENT"/>
                                    <L7p:value stringValue="Credentials Over Message"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <wsp:All wsp:Usage="Required">
                        <L7p:SslAssertion/>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <L7p:HttpBasic/>
                            <wsse:SecurityToken xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
                                <wsse:TokenType>http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd#UsernameToken</wsse:TokenType>
                                <L7p:Properties/>
                            </wsse:SecurityToken>
                            <L7p:SslAssertion>
                                <L7p:RequireClientAuthentication booleanValue="true"/>
                            </L7p:SslAssertion>
                        </wsp:OneOrMore>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="ZmFsc2U="/>
                            <L7p:VariableToSet stringValue="Flag_Enable_Response_Decoration"/>
                        </L7p:SetVariable>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="LEFT.COMMENT"/>
                                    <L7p:value stringValue="Credentials Over SSL Transport"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                </wsp:OneOrMore>
                <L7p:CommentAssertion>
                    <L7p:Comment stringValue="Add any other authentication assertions as needed into the &quot;At least one ...&quot; assertion below"/>
                </L7p:CommentAssertion>
                <wsp:OneOrMore wsp:Usage="Required">
                    <L7p:Authentication>
                        <L7p:IdentityProviderOid goidValue="0000000000000000fffffffffffffffe"/>
                    </L7p:Authentication>
                </wsp:OneOrMore>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="LEFT.COMMENT"/>
                            <L7p:value stringValue="Authentication Mechanism"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <L7p:RequestXpathAssertion>
                <L7p:AssertionComment assertionComment="included">
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="LEFT.COMMENT"/>
                            <L7p:value stringValue="RequestType Retrieval"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:AssertionComment>
                <L7p:VariablePrefix stringValue="requestType"/>
                <L7p:XpathExpression xpathExpressionValue="included">
                    <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='RequestSecurityToken']/*[local-name()='RequestType']"/>
                    <L7p:Namespaces mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="s"/>
                            <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                        </L7p:entry>
                    </L7p:Namespaces>
                </L7p:XpathExpression>
            </L7p:RequestXpathAssertion>
            <wsp:OneOrMore wsp:Usage="Required">
                <wsp:All wsp:Usage="Required">
                    <L7p:ComparisonAssertion>
                        <L7p:CaseSensitive booleanValue="false"/>
                        <L7p:Expression1 stringValue="${requestType.result}"/>
                        <L7p:Operator operatorNull="null"/>
                        <L7p:Predicates predicates="included">
                            <L7p:item dataType="included">
                                <L7p:Type variableDataType="string"/>
                            </L7p:item>
                            <L7p:item binary="included">
                                <L7p:Operator operator="CONTAINS"/>
                                <L7p:RightValue stringValue="/Issue"/>
                            </L7p:item>
                        </L7p:Predicates>
                    </L7p:ComparisonAssertion>
                    <L7p:RequestXpathAssertion>
                        <L7p:AssertionComment assertionComment="included">
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="LEFT.COMMENT"/>
                                    <L7p:value stringValue="TokenType Retrieval"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:AssertionComment>
                        <L7p:VariablePrefix stringValue="tokenType"/>
                        <L7p:XpathExpression xpathExpressionValue="included">
                            <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='RequestSecurityToken']/*[local-name()='TokenType']"/>
                            <L7p:Namespaces mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                </L7p:entry>
                            </L7p:Namespaces>
                        </L7p:XpathExpression>
                    </L7p:RequestXpathAssertion>
                    <wsp:All wsp:Usage="Required">
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${tokenType.result}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:RightValue stringValue="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:SamlIssuer>
                                    <L7p:AuthenticationStatement samlAuthenticationInfo="included">
                                    <L7p:AuthenticationMethods stringArrayValue="included"/>

                                    <L7p:IncludeAuthenticationContextDeclaration booleanValue="false"/>
                                    </L7p:AuthenticationStatement>
                                    <L7p:NameQualifier stringValue=""/>
                                    <L7p:Version boxedIntegerValue="2"/>
                                </L7p:SamlIssuer>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${tokenType.result}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:RightValue stringValue="urn:oasis:names:tc:SAML:2.0:assertion"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:SamlIssuer>
                                    <L7p:AuthenticationStatement samlAuthenticationInfo="included">
                                    <L7p:AuthenticationMethods stringArrayValue="included"/>

                                    <L7p:IncludeAuthenticationContextDeclaration booleanValue="false"/>
                                    </L7p:AuthenticationStatement>
                                    <L7p:NameQualifier stringValue=""/>
                                    <L7p:Version boxedIntegerValue="2"/>
                                </L7p:SamlIssuer>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${tokenType.result}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:RightValue stringValue="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:SamlIssuer>
                                    <L7p:AuthenticationStatement samlAuthenticationInfo="included">
                                    <L7p:AuthenticationMethods stringArrayValue="included"/>

                                    <L7p:IncludeAuthenticationContextDeclaration booleanValue="false"/>
                                    </L7p:AuthenticationStatement>
                                    <L7p:NameQualifier stringValue=""/>
                                    <L7p:Version boxedIntegerValue="1"/>
                                </L7p:SamlIssuer>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${tokenType.result}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="string"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:RightValue stringValue="urn:oasis:names:tc:SAML:1.0:assertion"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:SamlIssuer>
                                    <L7p:AuthenticationStatement samlAuthenticationInfo="included">
                                    <L7p:AuthenticationMethods stringArrayValue="included"/>

                                    <L7p:IncludeAuthenticationContextDeclaration booleanValue="false"/>
                                    </L7p:AuthenticationStatement>
                                    <L7p:NameQualifier stringValue=""/>
                                    <L7p:Version boxedIntegerValue="1"/>
                                </L7p:SamlIssuer>
                            </wsp:All>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="LEFT.COMMENT"/>
                                    <L7p:value stringValue="SAML Version Retrieval"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:OneOrMore>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <L7p:BuildRstrSoapResponse>
                                <L7p:IncludeAttachedRef booleanValue="true"/>
                                <L7p:IncludeUnattachedRef booleanValue="true"/>
                                <L7p:TokenIssued stringValue="${issuedSamlAssertion}"/>
                            </L7p:BuildRstrSoapResponse>
                            <L7p:TrueAssertion/>
                        </wsp:OneOrMore>
                    </wsp:All>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="LEFT.COMMENT"/>
                                <L7p:value stringValue="SAML Token Issuance"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:All>
                <wsp:All wsp:Usage="Required">
                    <L7p:ComparisonAssertion>
                        <L7p:CaseSensitive booleanValue="false"/>
                        <L7p:Expression1 stringValue="${requestType.result}"/>
                        <L7p:Operator operatorNull="null"/>
                        <L7p:Predicates predicates="included">
                            <L7p:item dataType="included">
                                <L7p:Type variableDataType="string"/>
                            </L7p:item>
                            <L7p:item binary="included">
                                <L7p:Operator operator="CONTAINS"/>
                                <L7p:RightValue stringValue="/Issue"/>
                            </L7p:item>
                        </L7p:Predicates>
                    </L7p:ComparisonAssertion>
                    <L7p:RequestXpathAssertion>
                        <L7p:AssertionComment assertionComment="included">
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="LEFT.COMMENT"/>
                                    <L7p:value stringValue="TokenType Retrieval"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:AssertionComment>
                        <L7p:VariablePrefix stringValue="tokenType"/>
                        <L7p:XpathExpression xpathExpressionValue="included">
                            <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='RequestSecurityToken']/*[local-name()='TokenType']"/>
                            <L7p:Namespaces mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                </L7p:entry>
                            </L7p:Namespaces>
                        </L7p:XpathExpression>
                    </L7p:RequestXpathAssertion>
                    <L7p:ComparisonAssertion>
                        <L7p:CaseSensitive booleanValue="false"/>
                        <L7p:Expression1 stringValue="${tokenType.result}"/>
                        <L7p:Operator operatorNull="null"/>
                        <L7p:Predicates predicates="included">
                            <L7p:item dataType="included">
                                <L7p:Type variableDataType="string"/>
                            </L7p:item>
                            <L7p:item binary="included">
                                <L7p:Operator operator="CONTAINS"/>
                                <L7p:RightValue stringValue="/sct"/>
                            </L7p:item>
                        </L7p:Predicates>
                    </L7p:ComparisonAssertion>
                    <L7p:CreateSecurityContextToken/>
                    <wsp:OneOrMore wsp:Usage="Required">
                        <L7p:BuildRstrSoapResponse>
                            <L7p:IncludeAttachedRef booleanValue="true"/>
                            <L7p:IncludeKeySize booleanValue="true"/>
                            <L7p:IncludeLifetime booleanValue="true"/>
                            <L7p:IncludeUnattachedRef booleanValue="true"/>
                            <L7p:TokenIssued stringValue="${sctBuilder.issuedSCT}"/>
                        </L7p:BuildRstrSoapResponse>
                        <L7p:TrueAssertion/>
                    </wsp:OneOrMore>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="LEFT.COMMENT"/>
                                <L7p:value stringValue="SecurityContextToken Issuance"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:All>
                <wsp:All wsp:Usage="Required">
                    <L7p:ComparisonAssertion>
                        <L7p:CaseSensitive booleanValue="false"/>
                        <L7p:Expression1 stringValue="${requestType.result}"/>
                        <L7p:Operator operatorNull="null"/>
                        <L7p:Predicates predicates="included">
                            <L7p:item dataType="included">
                                <L7p:Type variableDataType="string"/>
                            </L7p:item>
                            <L7p:item binary="included">
                                <L7p:Operator operator="CONTAINS"/>
                                <L7p:RightValue stringValue="/Cancel"/>
                            </L7p:item>
                        </L7p:Predicates>
                    </L7p:ComparisonAssertion>
                    <L7p:CancelSecurityContext/>
                    <wsp:OneOrMore wsp:Usage="Required">
                        <L7p:BuildRstrSoapResponse>
                            <L7p:ResponseForIssuance booleanValue="false"/>
                        </L7p:BuildRstrSoapResponse>
                        <L7p:TrueAssertion/>
                    </wsp:OneOrMore>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="LEFT.COMMENT"/>
                                <L7p:value stringValue="Security Context Cancellation"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:All>
                <wsp:All wsp:Usage="Required">
                    <L7p:FalseAssertion/>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="LEFT.COMMENT"/>
                                <L7p:value stringValue="Other Requests"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:All>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="LEFT.COMMENT"/>
                            <L7p:value stringValue="RST Request Execution"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:OneOrMore>
            <wsp:All wsp:Usage="Required">
                <L7p:WsAddressing>
                    <L7p:VariablePrefix stringValue="wsaGetter"/>
                </L7p:WsAddressing>
                <L7p:AddWsAddressing>
                    <L7p:Action stringValue="${responseBuilder.rstrWsaAction}"/>
                    <L7p:OtherTargetMessageVariable stringValue="responseBuilder.rstrResponse"/>
                    <L7p:RelatesToMessageId stringValue="${wsaGetter.messageid}"/>
                    <L7p:Target target="OTHER"/>
                    <L7p:VariablePrefix stringValue="wsaSetter"/>
                    <L7p:WsaNamespaceUri stringValue="${responseBuilder.wsaNamespace}"/>
                </L7p:AddWsAddressing>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="LEFT.COMMENT"/>
                            <L7p:value stringValue="Adding WS-Addressing Into Response"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <L7p:HardcodedResponse>
                <L7p:AssertionComment assertionComment="included">
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="LEFT.COMMENT"/>
                            <L7p:value stringValue="RSTR Response Message Template"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:AssertionComment>
                <L7p:Base64ResponseBody stringValue="JHtyZXNwb25zZUJ1aWxkZXIucnN0clJlc3BvbnNlLm1haW5wYXJ0fQ=="/>
            </L7p:HardcodedResponse>
            <wsp:OneOrMore wsp:Usage="Required">
                <wsp:All wsp:Usage="Required">
                    <L7p:ComparisonAssertion>
                        <L7p:AssertionComment assertionComment="included">
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="LEFT.COMMENT"/>
                                    <L7p:value stringValue="Check If RSTR Response Decoration Enabled Or Disabled"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:AssertionComment>
                        <L7p:CaseSensitive booleanValue="false"/>
                        <L7p:Expression1 stringValue="${Flag_Enable_Response_Decoration}"/>
                        <L7p:Operator operatorNull="null"/>
                        <L7p:Predicates predicates="included">
                            <L7p:item dataType="included">
                                <L7p:Type variableDataType="string"/>
                            </L7p:item>
                            <L7p:item binary="included">
                                <L7p:CaseSensitive booleanValue="false"/>
                                <L7p:RightValue stringValue="true"/>
                            </L7p:item>
                        </L7p:Predicates>
                    </L7p:ComparisonAssertion>
                    <wsp:All wsp:Usage="Required">
                        <L7p:CommentAssertion>
                            <L7p:Comment stringValue="Add, remove, or modify decoration requirements as needed"/>
                        </L7p:CommentAssertion>
                        <L7p:WssSignElement>
                            <L7p:XpathExpression xpathExpressionValue="included">
                                <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']"/>
                                <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="wsp"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/ws/2002/12/policy"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="tns"/>
                                    <L7p:value stringValue="http://tempuri.org/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="s12"/>
                                    <L7p:value stringValue="http://www.w3.org/2003/05/soap-envelope"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="xsd"/>
                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="L7p"/>
                                    <L7p:value stringValue="http://www.layer7tech.com/ws/policy"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="xsi"/>
                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema-instance"/>
                                    </L7p:entry>
                                </L7p:Namespaces>
                            </L7p:XpathExpression>
                        </L7p:WssSignElement>
                        <L7p:WssEncryptElement>
                            <L7p:XEncAlgorithm stringValue="http://www.w3.org/2001/04/xmlenc#aes256-cbc"/>
                            <L7p:XpathExpression xpathExpressionValue="included">
                                <L7p:Expression stringValue="/*[local-name()='Envelope']/*[local-name()='Body']"/>
                                <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                </L7p:Namespaces>
                            </L7p:XpathExpression>
                        </L7p:WssEncryptElement>
                        <L7p:WssConfiguration>
                            <L7p:EncryptSignature booleanValue="true"/>
                            <L7p:ProtectTokens booleanValue="false"/>
                            <L7p:SignWsAddressingHeaders booleanValue="true"/>
                            <L7p:UseDerivedKeys booleanValue="true"/>
                        </L7p:WssConfiguration>
                        <L7p:WsSecurity>
                            <L7p:ClearDecorationRequirements booleanValue="true"/>
                            <L7p:Target target="RESPONSE"/>
                            <L7p:UseSecurityHeaderMustUnderstand booleanValue="false"/>
                        </L7p:WsSecurity>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="LEFT.COMMENT"/>
                                    <L7p:value stringValue="Decorate RSTR Response"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                </wsp:All>
                <L7p:TrueAssertion/>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="LEFT.COMMENT"/>
                            <L7p:value stringValue="RSTR Response Decoration"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:OneOrMore>
        </wsp:All>
    </wsp:Policy>
</exp:Export>

