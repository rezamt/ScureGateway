<?xml version="1.0" encoding="UTF-8"?>
<exp:Export Version="3.0"
    xmlns:L7p="http://www.layer7tech.com/ws/policy"
    xmlns:exp="http://www.layer7tech.com/ws/policy/export" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
    <exp:References>
        <IncludedPolicyReference
            RefType="com.l7tech.console.policy.exporter.IncludedPolicyReference"
            guid="d95d5a18-529d-4e0f-a7ec-1087fc0fcaa3" included="true"
            name="TLS Policy" soap="false" type="INCLUDE_FRAGMENT">
            <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
                <wsp:All wsp:Usage="Required">
                    <L7p:AuditDetailAssertion>
                        <L7p:Detail stringValue="Policy Fragment: TLS Policy"/>
                    </L7p:AuditDetailAssertion>
                    <wsp:OneOrMore wsp:Usage="Required">
                        <L7p:SslAssertion/>
                        <wsp:All wsp:Usage="Required">
                            <L7p:HardcodedResponse>
                                <L7p:Base64ResponseBody stringValue="ewogICAgICJzdGF0dXMiIDogIkVycm9yIiwKICAgICAicmVhc29uIiA6ICJVbnN1cHBvcnRlZCBUcmFuc3BvcnQgUHJvdG9jb2wiCn0="/>
                                <L7p:EarlyResponse booleanValue="true"/>
                                <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                                <L7p:ResponseStatus stringValue="400"/>
                            </L7p:HardcodedResponse>
                            <L7p:FalseAssertion/>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=" - Definilty needs to stop Policy Processing on the Gateway"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:All>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=" - HTTPs Only"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:OneOrMore>
                </wsp:All>
            </wsp:Policy>
        </IncludedPolicyReference>
        <IDProviderReference RefType="com.l7tech.console.policy.exporter.IdProviderReference">
            <GOID>6cf79ed298d47470a77f09ff53f3c684</GOID>
            <Name>WindowsAD2012</Name>
            <Props>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGphdmEgdmVyc2lvbj0iMS44&#xd;
LjBfMTMxIiBjbGFzcz0iamF2YS5iZWFucy5YTUxEZWNvZGVyIj4KIDxvYmplY3QgY2xhc3M9Imph&#xd;
dmEudXRpbC5IYXNoTWFwIj4KICA8dm9pZCBtZXRob2Q9InB1dCI+CiAgIDxzdHJpbmc+cmV0dXJu&#xd;
aW5nQXR0cmlidXRlczwvc3RyaW5nPgogICA8YXJyYXkgY2xhc3M9ImphdmEubGFuZy5TdHJpbmci&#xd;
IGxlbmd0aD0iMCIvPgogIDwvdm9pZD4KICA8dm9pZCBtZXRob2Q9InB1dCI+CiAgIDxzdHJpbmc+&#xd;
bnRsbVByb3ZpZGVyUHJvcGVydGllczwvc3RyaW5nPgogICA8b2JqZWN0IGNsYXNzPSJqYXZhLnV0&#xd;
aWwuVHJlZU1hcCI+CiAgICA8dm9pZCBtZXRob2Q9InB1dCI+CiAgICAgPHN0cmluZz5kb21haW4u&#xd;
ZG5zLm5hbWU8L3N0cmluZz4KICAgICA8c3RyaW5nPjwvc3RyaW5nPgogICAgPC92b2lkPgogICAg&#xd;
PHZvaWQgbWV0aG9kPSJwdXQiPgogICAgIDxzdHJpbmc+ZG9tYWluLm5ldGJpb3MubmFtZTwvc3Ry&#xd;
aW5nPgogICAgIDxzdHJpbmc+PC9zdHJpbmc+CiAgICA8L3ZvaWQ+CiAgICA8dm9pZCBtZXRob2Q9&#xd;
InB1dCI+CiAgICAgPHN0cmluZz5lbmFibGVkPC9zdHJpbmc+CiAgICAgPHN0cmluZz5mYWxzZTwv&#xd;
c3RyaW5nPgogICAgPC92b2lkPgogICAgPHZvaWQgbWV0aG9kPSJwdXQiPgogICAgIDxzdHJpbmc+&#xd;
aG9zdC5kbnMubmFtZTwvc3RyaW5nPgogICAgIDxzdHJpbmc+PC9zdHJpbmc+CiAgICA8L3ZvaWQ+&#xd;
CiAgICA8dm9pZCBtZXRob2Q9InB1dCI+CiAgICAgPHN0cmluZz5ob3N0Lm5ldGJpb3MubmFtZTwv&#xd;
c3RyaW5nPgogICAgIDxzdHJpbmc+PC9zdHJpbmc+CiAgICA8L3ZvaWQ+CiAgICA8dm9pZCBtZXRo&#xd;
b2Q9InB1dCI+CiAgICAgPHN0cmluZz5zZXJ2ZXIuZG5zLm5hbWU8L3N0cmluZz4KICAgICA8c3Ry&#xd;
aW5nPjwvc3RyaW5nPgogICAgPC92b2lkPgogICAgPHZvaWQgbWV0aG9kPSJwdXQiPgogICAgIDxz&#xd;
dHJpbmc+c2VydmljZS5hY2NvdW50PC9zdHJpbmc+CiAgICAgPHN0cmluZz48L3N0cmluZz4KICAg&#xd;
IDwvdm9pZD4KICAgPC9vYmplY3Q+CiAgPC92b2lkPgogIDx2b2lkIG1ldGhvZD0icHV0Ij4KICAg&#xd;
PHN0cmluZz5ncm91cE1lbWJlcnNoaXBDYXNlSW5zZW5zaXRpdmU8L3N0cmluZz4KICAgPGJvb2xl&#xd;
YW4+ZmFsc2U8L2Jvb2xlYW4+CiAgPC92b2lkPgogIDx2b2lkIG1ldGhvZD0icHV0Ij4KICAgPHN0&#xd;
cmluZz51c3JtYXBwaW5nczwvc3RyaW5nPgogICA8b2JqZWN0IGNsYXNzPSJqYXZhLnV0aWwuSGFz&#xd;
aE1hcCI+CiAgICA8dm9pZCBtZXRob2Q9InB1dCI+CiAgICAgPHN0cmluZz51c2VyPC9zdHJpbmc+&#xd;
CiAgICAgPG9iamVjdCBjbGFzcz0iY29tLmw3dGVjaC5pZGVudGl0eS5sZGFwLlVzZXJNYXBwaW5n&#xd;
Q29uZmlnIj4KICAgICAgPHZvaWQgcHJvcGVydHk9ImVtYWlsTmFtZUF0dHJOYW1lIj4KICAgICAg&#xd;
IDxzdHJpbmc+bWFpbDwvc3RyaW5nPgogICAgICA8L3ZvaWQ+CiAgICAgIDx2b2lkIHByb3BlcnR5&#xd;
PSJmaXJzdE5hbWVBdHRyTmFtZSI+CiAgICAgICA8c3RyaW5nPmdpdmVuTmFtZTwvc3RyaW5nPgog&#xd;
ICAgICA8L3ZvaWQ+CiAgICAgIDx2b2lkIHByb3BlcnR5PSJrZXJiZXJvc0F0dHJOYW1lIj4KICAg&#xd;
ICAgIDxzdHJpbmc+c0FNQWNjb3VudE5hbWU8L3N0cmluZz4KICAgICAgPC92b2lkPgogICAgICA8&#xd;
dm9pZCBwcm9wZXJ0eT0ia2VyYmVyb3NFbnRlcnByaXNlQXR0ck5hbWUiPgogICAgICAgPHN0cmlu&#xd;
Zz51c2VyUHJpbmNpcGFsTmFtZTwvc3RyaW5nPgogICAgICA8L3ZvaWQ+CiAgICAgIDx2b2lkIHBy&#xd;
b3BlcnR5PSJsYXN0TmFtZUF0dHJOYW1lIj4KICAgICAgIDxzdHJpbmc+c248L3N0cmluZz4KICAg&#xd;
ICAgPC92b2lkPgogICAgICA8dm9pZCBwcm9wZXJ0eT0ibG9naW5BdHRyTmFtZSI+CiAgICAgICA8&#xd;
c3RyaW5nPnNBTUFjY291bnROYW1lPC9zdHJpbmc+CiAgICAgIDwvdm9pZD4KICAgICAgPHZvaWQg&#xd;
cHJvcGVydHk9Im5hbWVBdHRyTmFtZSI+CiAgICAgICA8c3RyaW5nPmNuPC9zdHJpbmc+CiAgICAg&#xd;
IDwvdm9pZD4KICAgICAgPHZvaWQgcHJvcGVydHk9Im9iakNsYXNzIj4KICAgICAgIDxzdHJpbmc+&#xd;
dXNlcjwvc3RyaW5nPgogICAgICA8L3ZvaWQ+CiAgICAgIDx2b2lkIHByb3BlcnR5PSJwYXNzd2RB&#xd;
dHRyTmFtZSI+CiAgICAgICA8c3RyaW5nPnVzZXJQYXNzd29yZDwvc3RyaW5nPgogICAgICA8L3Zv&#xd;
aWQ+CiAgICAgIDx2b2lkIHByb3BlcnR5PSJwYXNzd2RUeXBlIj4KICAgICAgIDxvYmplY3QgY2xh&#xd;
c3M9ImNvbS5sN3RlY2guaWRlbnRpdHkubGRhcC5QYXNzd2RTdHJhdGVneSIvPgogICAgICA8L3Zv&#xd;
aWQ+CiAgICAgIDx2b2lkIHByb3BlcnR5PSJ1c2VyQ2VydEF0dHJOYW1lIj4KICAgICAgIDxzdHJp&#xd;
bmc+dXNlckNlcnRpZmljYXRlPC9zdHJpbmc+CiAgICAgIDwvdm9pZD4KICAgICA8L29iamVjdD4K&#xd;
ICAgIDwvdm9pZD4KICAgPC9vYmplY3Q+CiAgPC92b2lkPgogIDx2b2lkIG1ldGhvZD0icHV0Ij4K&#xd;
ICAgPHN0cmluZz5sZGFwc2VhcmNoYmFzZTwvc3RyaW5nPgogICA8c3RyaW5nPkRDPW15ZG9tYWlu&#xd;
LERDPWNvbTwvc3RyaW5nPgogIDwvdm9pZD4KICA8dm9pZCBtZXRob2Q9InB1dCI+CiAgIDxzdHJp&#xd;
bmc+Z3JvdXBDYWNoZU1heEFnZTwvc3RyaW5nPgogICA8bG9uZz42MDAwMDwvbG9uZz4KICA8L3Zv&#xd;
aWQ+CiAgPHZvaWQgbWV0aG9kPSJwdXQiPgogICA8c3RyaW5nPmxkYXBCaW5kRE48L3N0cmluZz4K&#xd;
ICAgPHN0cmluZz5DTj1BZG1pbmlzdHJhdG9yLENOPVVzZXJzLERDPW15ZG9tYWluLERDPWNvbTwv&#xd;
c3RyaW5nPgogIDwvdm9pZD4KICA8dm9pZCBtZXRob2Q9InB1dCI+CiAgIDxzdHJpbmc+Z3JvdXBD&#xd;
YWNoZVNpemU8L3N0cmluZz4KICAgPGludD4xMDA8L2ludD4KICA8L3ZvaWQ+CiAgPHZvaWQgbWV0&#xd;
aG9kPSJwdXQiPgogICA8c3RyaW5nPmdyb3VwTWF4TmVzdGluZzwvc3RyaW5nPgogICA8aW50PjU8&#xd;
L2ludD4KICA8L3ZvaWQ+CiAgPHZvaWQgbWV0aG9kPSJwdXQiPgogICA8c3RyaW5nPmdycG1hcHBp&#xd;
bmdzPC9zdHJpbmc+CiAgIDxvYmplY3QgY2xhc3M9ImphdmEudXRpbC5IYXNoTWFwIj4KICAgIDx2&#xd;
b2lkIG1ldGhvZD0icHV0Ij4KICAgICA8c3RyaW5nPmdyb3VwPC9zdHJpbmc+CiAgICAgPG9iamVj&#xd;
dCBjbGFzcz0iY29tLmw3dGVjaC5pZGVudGl0eS5sZGFwLkdyb3VwTWFwcGluZ0NvbmZpZyI+CiAg&#xd;
ICAgIDx2b2lkIHByb3BlcnR5PSJtZW1iZXJBdHRyTmFtZSI+CiAgICAgICA8c3RyaW5nPm1lbWJl&#xd;
cjwvc3RyaW5nPgogICAgICA8L3ZvaWQ+CiAgICAgIDx2b2lkIHByb3BlcnR5PSJtZW1iZXJTdHJh&#xd;
dGVneSI+CiAgICAgICA8b2JqZWN0IGNsYXNzPSJjb20ubDd0ZWNoLmlkZW50aXR5LmxkYXAuTWVt&#xd;
YmVyU3RyYXRlZ3kiLz4KICAgICAgPC92b2lkPgogICAgICA8dm9pZCBwcm9wZXJ0eT0ibmFtZUF0&#xd;
dHJOYW1lIj4KICAgICAgIDxzdHJpbmc+Y248L3N0cmluZz4KICAgICAgPC92b2lkPgogICAgICA8&#xd;
dm9pZCBwcm9wZXJ0eT0ib2JqQ2xhc3MiPgogICAgICAgPHN0cmluZz5ncm91cDwvc3RyaW5nPgog&#xd;
ICAgICA8L3ZvaWQ+CiAgICAgPC9vYmplY3Q+CiAgICA8L3ZvaWQ+CiAgIDwvb2JqZWN0PgogIDwv&#xd;
dm9pZD4KICA8dm9pZCBtZXRob2Q9InB1dCI+CiAgIDxzdHJpbmc+b3JpZ2luYWxUZW1wbGF0ZU5h&#xd;
bWU8L3N0cmluZz4KICAgPHN0cmluZz5NaWNyb3NvZnRBY3RpdmVEaXJlY3Rvcnk8L3N0cmluZz4K&#xd;
ICA8L3ZvaWQ+CiAgPHZvaWQgbWV0aG9kPSJwdXQiPgogICA8c3RyaW5nPmFkbWluRW5hYmxlZDwv&#xd;
c3RyaW5nPgogICA8Ym9vbGVhbj50cnVlPC9ib29sZWFuPgogIDwvdm9pZD4KICA8dm9pZCBtZXRo&#xd;
b2Q9InB1dCI+CiAgIDxzdHJpbmc+Z3JvdXBDYWNoZU1heEFnZVVuaXQ8L3N0cmluZz4KICAgPHN0&#xd;
cmluZz5tPC9zdHJpbmc+CiAgPC92b2lkPgogIDx2b2lkIG1ldGhvZD0icHV0Ij4KICAgPHN0cmlu&#xd;
Zz5sZGFwdXJsPC9zdHJpbmc+CiAgIDxhcnJheSBjbGFzcz0iamF2YS5sYW5nLlN0cmluZyIgbGVu&#xd;
Z3RoPSIxIj4KICAgIDx2b2lkIGluZGV4PSIwIj4KICAgICA8c3RyaW5nPmxkYXA6Ly8xOTIuMTY4&#xd;
LjAuMTE0OjM4OTwvc3RyaW5nPgogICAgPC92b2lkPgogICA8L2FycmF5PgogIDwvdm9pZD4KICA8&#xd;
dm9pZCBtZXRob2Q9InB1dCI+CiAgIDxzdHJpbmc+Y2xpZW50QXV0aDwvc3RyaW5nPgogICA8Ym9v&#xd;
bGVhbj5mYWxzZTwvYm9vbGVhbj4KICA8L3ZvaWQ+CiA8L29iamVjdD4KPC9qYXZhPgo=</Props>
            <TypeVal>2</TypeVal>
        </IDProviderReference>
    </exp:References>
    <wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
        <wsp:All wsp:Usage="Required">
            <L7p:Include>
                <L7p:AssertionComment assertionComment="included">
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue=" - Required TLS Connection"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:AssertionComment>
                <L7p:PolicyGuid stringValue="d95d5a18-529d-4e0f-a7ec-1087fc0fcaa3"/>
            </L7p:Include>
            <L7p:HttpBasic>
                <L7p:AssertionComment assertionComment="included">
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue=" - Prompt user for HTTP Authentication over TLS"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:AssertionComment>
            </L7p:HttpBasic>
            <wsp:OneOrMore wsp:Usage="Required">
                <wsp:All wsp:Usage="Required">
                    <L7p:MemberOfGroup>
                        <L7p:AssertionComment assertionComment="included">
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="- Authenticate against Microsoft LDS"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:AssertionComment>
                        <L7p:GroupId stringValue="CN=Gateway,CN=Users,DC=mydomain,DC=com"/>
                        <L7p:GroupName stringValue="Gateway"/>
                        <L7p:IdentityProviderOid goidValue="6cf79ed298d47470a77f09ff53f3c684"/>
                    </L7p:MemberOfGroup>
                    <L7p:IdentityAttributes>
                        <L7p:IdentityProviderOid goidValue="6cf79ed298d47470a77f09ff53f3c684"/>
                        <L7p:LookupAttributes identityMappingArray="included">
                            <L7p:item ldapAttributeMapping="included">
                                <L7p:AttributeConfig attributeConfig="included">
                                    <L7p:Header header="included">
                                    <L7p:Name stringValue="User Login"/>
                                    <L7p:Type variableDataType="string"/>
                                    <L7p:UsersOrGroups usersOrGroups="USERS"/>
                                    <L7p:VariableName stringValue="login"/>
                                    </L7p:Header>
                                    <L7p:VariableName stringValue="login"/>
                                </L7p:AttributeConfig>
                                <L7p:ProviderOid goidValue="6cf79ed298d47470a77f09ff53f3c684"/>
                            </L7p:item>
                            <L7p:item ldapAttributeMapping="included">
                                <L7p:AttributeConfig attributeConfig="included">
                                    <L7p:Header header="included">
                                    <L7p:Name stringValue="Last Name"/>
                                    <L7p:Type variableDataType="string"/>
                                    <L7p:UsersOrGroups usersOrGroups="USERS"/>
                                    <L7p:VariableName stringValue="lastName"/>
                                    </L7p:Header>
                                    <L7p:VariableName stringValue="lastName"/>
                                </L7p:AttributeConfig>
                                <L7p:ProviderOid goidValue="6cf79ed298d47470a77f09ff53f3c684"/>
                            </L7p:item>
                            <L7p:item ldapAttributeMapping="included">
                                <L7p:AttributeConfig attributeConfig="included">
                                    <L7p:Header header="included">
                                    <L7p:Name stringValue="E-mail Address"/>
                                    <L7p:Type variableDataType="string"/>
                                    <L7p:UsersOrGroups usersOrGroups="USERS"/>
                                    <L7p:VariableName stringValue="email"/>
                                    </L7p:Header>
                                    <L7p:VariableName stringValue="email"/>
                                </L7p:AttributeConfig>
                                <L7p:ProviderOid goidValue="6cf79ed298d47470a77f09ff53f3c684"/>
                            </L7p:item>
                        </L7p:LookupAttributes>
                    </L7p:IdentityAttributes>
                </wsp:All>
                <wsp:All wsp:Usage="Required">
                    <L7p:HardcodedResponse>
                        <L7p:Base64ResponseBody stringValue="ewogICAgInN0YXR1cyI6ICJFcnJvciIsCiAgICAicmVhc29uIjogIkludmFsaWQgQ3JlZGVudGlhbHMiCn0="/>
                        <L7p:EarlyResponse booleanValue="true"/>
                        <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                        <L7p:ResponseStatus stringValue="401"/>
                    </L7p:HardcodedResponse>
                    <L7p:FalseAssertion/>
                </wsp:All>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue=" - Authenticate Token Requester"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:OneOrMore>
            <L7p:SetVariable>
                <L7p:AssertionComment assertionComment="included">
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue=" - Generates Nounce"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:AssertionComment>
                <L7p:Base64Expression stringValue="JHtnYXRld2F5LnJhbmRvbS4zMi5oZXh9"/>
                <L7p:VariableToSet stringValue="nounce"/>
            </L7p:SetVariable>
            <wsp:All wsp:Usage="Required">
                <L7p:CommentAssertion>
                    <L7p:Comment stringValue="- Caching is not across cluster, and we need to do it cross gateway clusters (Ref: L7 Documentation)"/>
                </L7p:CommentAssertion>
                <wsp:OneOrMore wsp:Usage="Required">
                    <L7p:HttpRoutingAssertion>
                        <L7p:FailOnErrorStatus booleanValue="false"/>
                        <L7p:Login stringValue="sysway"/>
                        <L7p:Password stringValue="${secpass.sysway.plaintext}"/>
                        <L7p:ProtectedServiceUrl stringValue="https://ssg01.mydomain.com:8081/v1/cache?token=${nounce}"/>
                        <L7p:ProxyPassword stringValueNull="null"/>
                        <L7p:ProxyUsername stringValueNull="null"/>
                        <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                            <L7p:ForwardAll booleanValue="true"/>
                            <L7p:Rules httpPassthroughRules="included">
                                <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Cookie"/>
                                </L7p:item>
                                <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="SOAPAction"/>
                                </L7p:item>
                            </L7p:Rules>
                        </L7p:RequestHeaderRules>
                        <L7p:RequestParamRules httpPassthroughRuleSet="included">
                            <L7p:ForwardAll booleanValue="true"/>
                            <L7p:Rules httpPassthroughRules="included"/>
                        </L7p:RequestParamRules>
                        <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                            <L7p:ForwardAll booleanValue="true"/>
                            <L7p:Rules httpPassthroughRules="included">
                                <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Set-Cookie"/>
                                </L7p:item>
                            </L7p:Rules>
                        </L7p:ResponseHeaderRules>
                        <L7p:SamlAssertionVersion intValue="2"/>
                    </L7p:HttpRoutingAssertion>
                    <wsp:All wsp:Usage="Required">
                        <L7p:AuditDetailAssertion>
                            <L7p:Detail stringValue="Nounce broadcast to Gateway ssg01.mydomain.com failed. Check the Gateway Status"/>
                            <L7p:Level stringValue="WARNING"/>
                            <L7p:LoggingOnly booleanValue="true"/>
                        </L7p:AuditDetailAssertion>
                        <L7p:TrueAssertion/>
                    </wsp:All>
                </wsp:OneOrMore>
                <wsp:OneOrMore wsp:Usage="Required">
                    <L7p:HttpRoutingAssertion>
                        <L7p:FailOnErrorStatus booleanValue="false"/>
                        <L7p:Login stringValue="sysway"/>
                        <L7p:Password stringValue="${secpass.sysway.plaintext}"/>
                        <L7p:ProtectedServiceUrl stringValue="https://ssg02.mydomain.com:8081/v1/cache?token=${nounce}"/>
                        <L7p:ProxyPassword stringValueNull="null"/>
                        <L7p:ProxyUsername stringValueNull="null"/>
                        <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                            <L7p:ForwardAll booleanValue="true"/>
                            <L7p:Rules httpPassthroughRules="included">
                                <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Cookie"/>
                                </L7p:item>
                                <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="SOAPAction"/>
                                </L7p:item>
                            </L7p:Rules>
                        </L7p:RequestHeaderRules>
                        <L7p:RequestParamRules httpPassthroughRuleSet="included">
                            <L7p:ForwardAll booleanValue="true"/>
                            <L7p:Rules httpPassthroughRules="included"/>
                        </L7p:RequestParamRules>
                        <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                            <L7p:ForwardAll booleanValue="true"/>
                            <L7p:Rules httpPassthroughRules="included">
                                <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Set-Cookie"/>
                                </L7p:item>
                            </L7p:Rules>
                        </L7p:ResponseHeaderRules>
                        <L7p:SamlAssertionVersion intValue="2"/>
                    </L7p:HttpRoutingAssertion>
                    <wsp:All wsp:Usage="Required">
                        <L7p:AuditDetailAssertion>
                            <L7p:Detail stringValue="Nounce broadcast to Gateway ssg02.mydomain.com failed. Check the Gateway Status"/>
                            <L7p:Level stringValue="WARNING"/>
                            <L7p:LoggingOnly booleanValue="true"/>
                        </L7p:AuditDetailAssertion>
                        <L7p:TrueAssertion/>
                    </wsp:All>
                </wsp:OneOrMore>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue="- Storing nounce across the gateway cluster "/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:CommentAssertion>
                    <L7p:Comment stringValue="Collects required assertions for OIDC Token"/>
                </L7p:CommentAssertion>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="ew0KICAibmFtZSI6ICIke3JlcXVlc3QuYXV0aGVudGljYXRlZFVzZXIubG9naW59IiwNCiAgImlzc3VlZEJ5IjogIiR7c3Nnbm9kZS5ob3N0bmFtZX0iLA0KICAiaXNzdWVkQXQiIDogIiR7Z2F0ZXdheS50aW1lLm1pbGxpc30iLA0KICAiZXhwaXJlZEFmdGVyIjogIjEyMDAwMDAiLA0KICAibm91bmNlIiA6ICIke25vdW5jZX0iLA0KICAicmVxaWQiIDogIiR7cmVxdWVzdElkfSIsDQogICJzY29wZSIgOiAiUkVBRCxXUklURSINCn0="/>
                    <L7p:VariableToSet stringValue="jsonPayload"/>
                </L7p:SetVariable>
                <L7p:JwtEncode>
                    <L7p:AlgorithmSecretLocation intValue="1"/>
                    <L7p:AlgorithmSecretValue stringValue="00000000000000000000000000000002.ssl"/>
                    <L7p:JsonPayload stringValue="${jsonPayload}"/>
                    <L7p:OutputVariable stringValue="signedJSONPayload"/>
                    <L7p:SignatureSelected intValue="1"/>
                    <L7p:SignatureValue stringValue="RS256"/>
                </L7p:JwtEncode>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue=" - Generating OIDC Token"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <L7p:HardcodedResponse>
                <L7p:Base64ResponseBody stringValue="ewogICAgInN0YXR1cyIgOiAic3VjY2VzcyIsCiAgICAidG9rZW4iIDogIiR7c2lnbmVkSlNPTlBheWxvYWR9Igp9"/>
                <L7p:EarlyResponse booleanValue="true"/>
                <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
            </L7p:HardcodedResponse>
        </wsp:All>
    </wsp:Policy>
</exp:Export>

